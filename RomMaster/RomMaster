#!/bin/bash
#
# RomMaster
# https://github.com/travis134/RomMaster
# Description : main script
#

log() {
    local message
    local ts

    message=$1
    ts=$(date +"%Y-%m-%dT%H:%M:%S%z")

    echo "${ts}: ${message}" >&2
}

# Reads config JSON in which contains information about supported systems, the
# expected extensions for suitable roms, and query overrides for better search
# results.
read_config() {
    local config

    config=$(cat config.json)

    echo "${config}"
}

# Reads the desired system info from the config file given the desired system
# id.
get_system() {
    local systems
    local desired_id
    local desired

    systems=$1
    desired_id=$2

    desired=$(echo "${systems}" \
        | jq -r --arg desired_id "${desired_id}" '.[]
            | select(.id == $desired_id)'
    )

    echo "${desired}"
}

# Creates a query string for eliminating results for all systems except for
# the system desired.
create_query() {
    local base_query
    local systems
    local desired
    local query
    local retain

    base_query=$1
    systems=$2
    desired=$3

    query=${base_query}
    query+=" AND "
    query+=$(echo "${desired}" \
        | jq -r '.query'
    )
    retain=$(echo "${desired}" \
        | jq '.retain'
    )

    query+=" AND subject:("
    # Avoid over filtering if the system name is a substring of desired,
    # i.e. if we want "snes" we wouldn't want to filter out "nes" because.
    # all "snes" entries would also be eliminated.
    query+=$(echo "${systems}" \
        | jq -r --arg desired_id "${desired_id}" --arg retain "${retain}" '.
            | map(
                select((.id | inside($desired_id)) or (.id | inside($retain)) | not)
                | "NOT \(.id)")
            | join(" AND ")'
    )
    query+=")"

    # We need to URL encode the special characters using jq.
    echo -n "${query}" \
        | jq -sRr @uri
}

# Searches for items that are compatible with a given system.
search_system() {
    local base_query
    local systems
    local desired
    local name
    local query
    local sort
    local projection
    local search_url
    local response
    local results
    local results_count

    base_query=$1
    systems=$2
    desired=$3

    name=$(echo "${desired}" \
        | jq -r .name)

    log "Searching items for system: ${name}"

    query=$(create_query "${base_query}" "${systems}" "${desired}")
    sort="downloads+desc"
    projection="identifier,title"
    search_url="https://archive.org/advancedsearch.php?output=json&q=${query}&fl[]=${projection}&sort[]=${sort}"

    log "Searching with url: ${search_url}"

    # Response body is JSON data formatted as:
    # {
    #   "response": {
    #     "docs": [
    #       {
    #         "identifier": "foo",
    #         "title": "bar"
    #       },
    #       ...
    #     ],
    #     ...
    #   },
    #   ...
    # }
    # 
    response=$(curl -s "${search_url}")
    results=$(echo "${response}" \
        | jq .response.docs
    )
    results_count=$(echo "${results}" \
        | jq '. | length'
    )
    log "Found ${results_count} matching items for ${name}"

    echo "${results}"
}

# Lists files within a given item.
list_files() {
    local desired
    local item
    local ext
    local item_id
    local metadata_url
    local response
    local results
    local results_count

    desired=$1
    item=$2

    ext=$(echo "${desired}" \
        | jq -r .ext
    )
    item_id=$(echo "${item}" \
        | jq -r .identifier
    )

    metadata_url="https://archive.org/metadata/${item_id}"

    log "Loading metadata with url: ${metadata_url}"

    # Response body is JSON data formatted as:
    # {
    #   "files": [
    #     {
    #       "name": "foo",
    #       "size": "bar",
    #       ...
    #     },
    #   ...
    #   ],
    #   ...
    # }
    response=$(curl -s "${metadata_url}")
    results=$(echo "${response}" \
        | jq -r --arg ext "${ext}" '.files
            | map(
                select(.name | split(".")[-1] | inside($ext))
                | {name: .name, size: .size})'
    )
    results_count=$(echo "${results}" \
        | jq '. | length'
    )
    log "Found ${results_count} matching files in ${item_id}"

    echo "${results}"
}

# Download a given file to its corresponding system folder.
download_file() {
    local base_path
    local desired
    local item
    local file
    local item_id
    local name
    local name_uri
    local download_url
    local download_path

    base_path=$1
    desired=$2
    item=$3
    file=$4

    item_id=$(echo "${item}" \
        | jq -r .identifier
    )
    name=$(echo "${file}" \
        | jq -r .name
    )
    # We need to URL encode the special characters using jq.
    name_uri=$(echo -n "${name}" \
        | jq -sRr @uri
    )
    download_url="https://archive.org/download/${item_id}/${name_uri}"
    echo "${download_url}"
    desired_path=$(echo "${desired}" \
        | jq -r .path)
    download_path="${base_path}${desired_path}/${name}"

    log "Downloading ${name} to ${download_path} from ${download_url}"

    curl -L --create-dirs -o "${download_path}" "${download_url}"
}

# Example usage, this will search for an item matching the desired system, list
# all files in that item that are valid for the system (by file extension),
# then download one of the files.
# TODO: Bind this up to a UI.
log "Starting RomMaster"

config=$(read_config)
base_path=$(echo "${config}" \
    | jq -r .path
)
base_query=$(echo "${config}" \
    | jq -r .query
)
systems=$(echo "${config}" \
    | jq .systems
)
desired_id="snes"
desired=$(get_system "${systems}" "${desired_id}")
items=$(search_system "${base_query}" "${systems}" "${desired}")
item=$(echo "${items}" \
    | jq .[0])
files=$(list_files "${desired}" "${item}")
file=$(echo "${files}" \
    | jq .[0])
download_file "${base_path}" "${desired}" "${item}" "${file}"