#!/bin/bash
#
# RomMaster
# https://github.com/travis134/RomMaster
# Description : main script
#

log() {
    local message
    local ts

    message=$1
    ts=$(date +"%Y-%m-%dT%H:%M:%S%z")

    echo "${ts}: ${message}" >&2
}

# Reads config JSON in which contains information about supported systems, the
# expected extensions for suitable roms, and query overrides for better search
# results.
read_config() {
    local config

    config=$(cat config.json)

    echo "${config}"
}

# Creates a query string for eliminating results for all systems except for
# the system desired.
system_query() {
    local desired_id
    local config
    local desired
    local query
    local retain

    desired_id=$1
    config=$(read_config)
    desired=$(echo "${config}" \
        | jq -r --arg desired_id "${desired_id}" '.systems[]
            | select(.id == $desired_id)'
    )
    query=$(echo "${config}" \
        | jq -r .query
    )
    query+=" AND "
    query+=$(echo "${desired}" \
        | jq -r '.query'
    )
    retain=$(echo "${desired}" \
        | jq '.retain'
    )

    query+=" AND subject:("
    # Avoid over filtering if the system name is a substring of desired,
    # i.e. if we want "snes" we wouldn't want to filter out "nes" because.
    # all "snes" entries would also be eliminated.
    query+=$(echo "${config}" \
        | jq -r --arg desired_id "${desired_id}" --arg retain "${retain}" '.systems
            | map(
                select((.id | inside($desired_id)) or (.id | inside($retain)) | not)
                | "NOT \(.id)")
            | join(" AND ")'
    )
    query+=")"

    echo "${query}"
}

# Searches for romsets that are compatible with a given system ID and returns
# results as a JSON array of identifiers and titles.
search_romsets() {
    local system_id
    local system_filter
    local query
    local search_romsets
    local projection
    local search_url
    local response
    local results
    local results_count

    system_id=$1
    log "Searching romsets for system: ${system_id}"

    system_filter=$(system_query "${system_id}")
    # We need to URL encode the special characters using jq.
    query=$(echo "${system_filter}" \
        | jq -sRr @uri
    )
    sort="downloads+desc"
    projection="identifier,title"
    search_url="https://archive.org/advancedsearch.php?output=json&q=${query}&fl[]=${projection}&sort[]=${sort}"

    log "Searching with url: ${search_url}"

    # Response body is JSON data formatted as:
    # {
    #   "response": {
    #     "docs": [
    #       {
    #         "identifier": "foo",
    #         "title": "bar"
    #       },
    #       ...
    #     ],
    #     ...
    #   },
    #   ...
    # }
    # 
    response=$(curl -s "${search_url}")
    results=$(echo "${response}" \
        | jq .response.docs
    )
    results_count=$(echo "${results}" \
        | jq '. | length'
    )
    log "Found ${results_count} matching romsets"

    echo "${results}"
}

read_files() {
    local system_id
    local romset
    local system_ext
    local romset_id
    local metadata_url
    local response
    local results

    system_id=$1
    romset=$2

    config=$(read_config)
    system_ext=$(echo "${config}" \
        | jq -r --arg system_id "${system_id}" '.systems[]
            | select(.id == $system_id)
            | .ext' 
    )
    romset_id=$(echo "${romset}" \
        | jq -r .identifier
    )

    metadata_url="https://archive.org/metadata/${romset_id}"

    log "Loading metadata with url: ${metadata_url}"

    # Response body is JSON data formatted as:
    # {
    #   "files": [
    #     {
    #       "name": "foo",
    #       "size": "bar",
    #       ...
    #     },
    #   ...
    #   ],
    #   ...
    # }
    response=$(curl -s "${metadata_url}")
    results=$(echo "${response}" \
        | jq -r --arg system_ext "${system_ext}" '.files
            | map(
                select(.name | split(".")[-1] | inside($system_ext))
                | {name: .name, size: .size})'
    )

    echo "${results}"
}

# Example usage, still WIP.
log "Starting RomMaster"
system_id=snes
romsets=$(search_romsets "${system_id}")
romset=$(echo "${romsets}" \
    | jq -r .[0])
files=$(read_files "${system_id}" "${romset}")
echo "${files}"
