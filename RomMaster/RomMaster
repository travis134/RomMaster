#!/bin/bash
#
# RomMaster
# https://github.com/travis134/RomMaster
# Description : main script
#

# Reads config JSON in which contains information about supported systems, the
# expected extensions for suitable roms, and query overrides for better search
# results.
read_config() {
    local config

    config=$(cat config.json)

    echo "$config"
}

# Creates a query string for eliminating results for all systems except for
# the system desired.
system_query() {
    local desired_id
    local config
    local desired
    local default
    local query

    desired_id=$1
    config=$(read_config)
    desired=$(echo "$config" \
        | jq -r --arg desired_id "$desired_id" '.systems[]
            | select(.id == $desired_id)'
    )
    default="subject:($desired_id)"
    query=$(echo "$desired" \
        | jq -r --arg default "$default" '.query // $default'
    )


    # Avoid over filtering if the system name is a substring of desired,
    # i.e. if we want "snes" we wouldn't want to filter out "nes" because.
    # all "snes" entries would also be eliminated.
    query+=$(echo "$config" \
        | jq -r --arg desired_id "$desired_id" '.systems
            | map(
                select(.id | inside($desired_id) | not)
                | " AND !subject:(\(.id))")
            | join("")'
    )

    echo "$query"
}

# Searches for romsets that are compatible with a given system ID and returns
# results as a JSON array of identifiers and titles.
search_romsets() {
    local system_id
    local system_filter
    local query
    local projection
    local search_url
    local response
    local results

    system_id=$1

    system_filter=$(system_query "$system_id")
    # We need to URL encode the special characters using jq.
    query=$(echo "mediatype:(software) AND subject:(romset) AND $system_filter" \
        | jq -sRr @uri
    )
    projection="identifier,title"
    search_url="https://archive.org/advancedsearch.php?output=json&q=$query&fl[]=$projection"

    # Response body is JSON data formatted as:
    # {
    #   ...,
    #   "response": {
    #     "docs": [
    #       {
    #         "identifier": "foo",
    #         "title": "bar"
    #       },
    #       ...
    #     ],
    #     ...
    #   },
    #   ...
    # }
    # 
    response=$(curl -s "$search_url")
    results=$(echo "$response" \
        | jq .response.docs
    )

    echo "$results"
}

read_files() {
    local system_id
    local romset
    local system_ext
    local romset_id
    local metadata_url
    local response
    local results

    system_id=$1
    romset=$2

    config=$(read_config)
    system_ext=$(echo "$config" \
        | jq -r --arg system_id "$system_id" '.systems[]
            | select(.id == $system_id)
            | .ext' 
    )
    romset_id=$(echo "$romset" \
        | jq -r .identifier
    )

    metadata_url="https://archive.org/metadata/$romset_id"

    # Response body is JSON data formatted as:
    # {
    #   ...,
    #   "files": [
    #     {
    #       "name": "foo",
    #       "size": "bar",
    #       "format": "baz",
    #       ...
    #     },
    #   ...
    #   ],
    #   ...
    # }
    response=$(curl -s "$metadata_url")
    results=$(echo "$response" \
        | jq -r --arg romset_id "$romset_id" '.files[]
            | select( .format == "7z" or .format == "ZIP" or .format == "ISO Image" or .format == "Unknown")
            | "https://archive.org/download/\($romset_id)/\(.name)"
    ')

    echo "$results"
}

# Example usage, still WIP.
system_id=snes
romsets=$(search_romsets "$system_id")
romset=$(echo "$romsets" \
    | jq -r .[0])
files=$(read_files "$system_id" "$romset")
echo "$files"
